lessons learned 11/16/2024
* only have to include the app url in project url.py once
* html/http going to be important to develop this 
* register/login are built in, harder to use than thought 
* register form routes unexpectedly to main on bad error without .as_p

issues 
* how to include templates for django.contrib.auth views

things to research 
* what is the CreateUserForm doing
* html/http and how they work 


lessons learned 11/18/2024 
* get and post = intuitive, get is to retreive from server, post is to add info into the server 
* get logs activity so post is meant for sensitive information such as passwords 

* django form != same thing as an html form, it is a class that abstracts html form creation 
    * the input fields are also different classes to handle different inputs 
    * A widget is Djangoâ€™s representation of an HTML input element, fields representation of widget 
    * all of it is class abstraction of html creation 

    * When rendering an object in Django, we generally:
        get hold of it in the view (fetch it from the database, for example)

        pass it to the template context

        expand it to HTML markup using template variables

issues
* still cannot figure out how to render the auth built in views, has to do with the templates 
    *possible work around to just create a login field and move on to have core function? 
    *cannot figure it out might have to create that custom login view/template
    *now have to work on understanding form creation, and using the django authentication models to do it myself 


lessons learned 11/21/2024 
* templates/registration/login.html is template path 
    * for access on site you use main/account/login
    * custom templates in templates/main/
    * built in templates at whatever templates/folder specified, but still main/whatever 


